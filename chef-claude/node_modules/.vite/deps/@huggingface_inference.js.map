{
  "version": 3,
  "sources": ["../../@huggingface/inference/dist/index.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  textToVideo: () => textToVideo,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/config.ts\nvar HF_HUB_URL = \"https://huggingface.co\";\nvar HF_ROUTER_URL = \"https://router.huggingface.co\";\n\n// src/providers/black-forest-labs.ts\nvar BLACK_FOREST_LABS_AI_API_BASE_URL = \"https://api.us1.bfl.ai/v1\";\nvar makeBody = (params) => {\n  return params.args;\n};\nvar makeHeaders = (params) => {\n  if (params.authMethod === \"provider-key\") {\n    return { \"X-Key\": `${params.accessToken}` };\n  } else {\n    return { Authorization: `Bearer ${params.accessToken}` };\n  }\n};\nvar makeUrl = (params) => {\n  return `${params.baseUrl}/${params.model}`;\n};\nvar BLACK_FOREST_LABS_CONFIG = {\n  baseUrl: BLACK_FOREST_LABS_AI_API_BASE_URL,\n  makeBody,\n  makeHeaders,\n  makeUrl\n};\n\n// src/providers/cohere.ts\nvar COHERE_API_BASE_URL = \"https://api.cohere.com\";\nvar makeBody2 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders2 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl2 = (params) => {\n  return `${params.baseUrl}/compatibility/v1/chat/completions`;\n};\nvar COHERE_CONFIG = {\n  baseUrl: COHERE_API_BASE_URL,\n  makeBody: makeBody2,\n  makeHeaders: makeHeaders2,\n  makeUrl: makeUrl2\n};\n\n// src/providers/fal-ai.ts\nvar FAL_AI_API_BASE_URL = \"https://fal.run\";\nvar makeBody3 = (params) => {\n  return params.args;\n};\nvar makeHeaders3 = (params) => {\n  return {\n    Authorization: params.authMethod === \"provider-key\" ? `Key ${params.accessToken}` : `Bearer ${params.accessToken}`\n  };\n};\nvar makeUrl3 = (params) => {\n  return `${params.baseUrl}/${params.model}`;\n};\nvar FAL_AI_CONFIG = {\n  baseUrl: FAL_AI_API_BASE_URL,\n  makeBody: makeBody3,\n  makeHeaders: makeHeaders3,\n  makeUrl: makeUrl3\n};\n\n// src/providers/fireworks-ai.ts\nvar FIREWORKS_AI_API_BASE_URL = \"https://api.fireworks.ai/inference\";\nvar makeBody4 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders4 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl4 = (params) => {\n  if (params.task === \"text-generation\" && params.chatCompletion) {\n    return `${params.baseUrl}/v1/chat/completions`;\n  }\n  return params.baseUrl;\n};\nvar FIREWORKS_AI_CONFIG = {\n  baseUrl: FIREWORKS_AI_API_BASE_URL,\n  makeBody: makeBody4,\n  makeHeaders: makeHeaders4,\n  makeUrl: makeUrl4\n};\n\n// src/providers/hf-inference.ts\nvar makeBody5 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders5 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl5 = (params) => {\n  if (params.task && [\"feature-extraction\", \"sentence-similarity\"].includes(params.task)) {\n    return `${params.baseUrl}/pipeline/${params.task}/${params.model}`;\n  }\n  if (params.task === \"text-generation\" && params.chatCompletion) {\n    return `${params.baseUrl}/models/${params.model}/v1/chat/completions`;\n  }\n  return `${params.baseUrl}/models/${params.model}`;\n};\nvar HF_INFERENCE_CONFIG = {\n  baseUrl: `${HF_ROUTER_URL}/hf-inference`,\n  makeBody: makeBody5,\n  makeHeaders: makeHeaders5,\n  makeUrl: makeUrl5\n};\n\n// src/providers/hyperbolic.ts\nvar HYPERBOLIC_API_BASE_URL = \"https://api.hyperbolic.xyz\";\nvar makeBody6 = (params) => {\n  return {\n    ...params.args,\n    ...params.task === \"text-to-image\" ? { model_name: params.model } : { model: params.model }\n  };\n};\nvar makeHeaders6 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl6 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  return `${params.baseUrl}/v1/chat/completions`;\n};\nvar HYPERBOLIC_CONFIG = {\n  baseUrl: HYPERBOLIC_API_BASE_URL,\n  makeBody: makeBody6,\n  makeHeaders: makeHeaders6,\n  makeUrl: makeUrl6\n};\n\n// src/providers/nebius.ts\nvar NEBIUS_API_BASE_URL = \"https://api.studio.nebius.ai\";\nvar makeBody7 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders7 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl7 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  if (params.task === \"text-generation\") {\n    if (params.chatCompletion) {\n      return `${params.baseUrl}/v1/chat/completions`;\n    }\n    return `${params.baseUrl}/v1/completions`;\n  }\n  return params.baseUrl;\n};\nvar NEBIUS_CONFIG = {\n  baseUrl: NEBIUS_API_BASE_URL,\n  makeBody: makeBody7,\n  makeHeaders: makeHeaders7,\n  makeUrl: makeUrl7\n};\n\n// src/providers/novita.ts\nvar NOVITA_API_BASE_URL = \"https://api.novita.ai/v3/openai\";\nvar makeBody8 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders8 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl8 = (params) => {\n  if (params.task === \"text-generation\") {\n    if (params.chatCompletion) {\n      return `${params.baseUrl}/chat/completions`;\n    }\n    return `${params.baseUrl}/completions`;\n  }\n  return params.baseUrl;\n};\nvar NOVITA_CONFIG = {\n  baseUrl: NOVITA_API_BASE_URL,\n  makeBody: makeBody8,\n  makeHeaders: makeHeaders8,\n  makeUrl: makeUrl8\n};\n\n// src/providers/replicate.ts\nvar REPLICATE_API_BASE_URL = \"https://api.replicate.com\";\nvar makeBody9 = (params) => {\n  return {\n    input: params.args,\n    version: params.model.includes(\":\") ? params.model.split(\":\")[1] : void 0\n  };\n};\nvar makeHeaders9 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl9 = (params) => {\n  if (params.model.includes(\":\")) {\n    return `${params.baseUrl}/v1/predictions`;\n  }\n  return `${params.baseUrl}/v1/models/${params.model}/predictions`;\n};\nvar REPLICATE_CONFIG = {\n  baseUrl: REPLICATE_API_BASE_URL,\n  makeBody: makeBody9,\n  makeHeaders: makeHeaders9,\n  makeUrl: makeUrl9\n};\n\n// src/providers/sambanova.ts\nvar SAMBANOVA_API_BASE_URL = \"https://api.sambanova.ai\";\nvar makeBody10 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders10 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl10 = (params) => {\n  if (params.task === \"text-generation\" && params.chatCompletion) {\n    return `${params.baseUrl}/v1/chat/completions`;\n  }\n  return params.baseUrl;\n};\nvar SAMBANOVA_CONFIG = {\n  baseUrl: SAMBANOVA_API_BASE_URL,\n  makeBody: makeBody10,\n  makeHeaders: makeHeaders10,\n  makeUrl: makeUrl10\n};\n\n// src/providers/together.ts\nvar TOGETHER_API_BASE_URL = \"https://api.together.xyz\";\nvar makeBody11 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders11 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl11 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  if (params.task === \"text-generation\") {\n    if (params.chatCompletion) {\n      return `${params.baseUrl}/v1/chat/completions`;\n    }\n    return `${params.baseUrl}/v1/completions`;\n  }\n  return params.baseUrl;\n};\nvar TOGETHER_CONFIG = {\n  baseUrl: TOGETHER_API_BASE_URL,\n  makeBody: makeBody11,\n  makeHeaders: makeHeaders11,\n  makeUrl: makeUrl11\n};\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// package.json\nvar name = \"@huggingface/inference\";\nvar version = \"3.4.0\";\n\n// src/providers/consts.ts\nvar HARDCODED_MODEL_ID_MAPPING = {\n  /**\n   * \"HF model ID\" => \"Model ID on Inference Provider's side\"\n   *\n   * Example:\n   * \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen2.5-Coder-32B-Instruct\",\n   */\n  \"black-forest-labs\": {},\n  cohere: {},\n  \"fal-ai\": {},\n  \"fireworks-ai\": {},\n  \"hf-inference\": {},\n  hyperbolic: {},\n  nebius: {},\n  novita: {},\n  replicate: {},\n  sambanova: {},\n  together: {}\n};\n\n// src/lib/getProviderModelId.ts\nvar inferenceProviderMappingCache = /* @__PURE__ */ new Map();\nasync function getProviderModelId(params, args, options = {}) {\n  if (params.provider === \"hf-inference\") {\n    return params.model;\n  }\n  if (!options.task) {\n    throw new Error(\"task must be specified when using a third-party provider\");\n  }\n  const task = options.task === \"text-generation\" && options.chatCompletion ? \"conversational\" : options.task;\n  if (HARDCODED_MODEL_ID_MAPPING[params.provider]?.[params.model]) {\n    return HARDCODED_MODEL_ID_MAPPING[params.provider][params.model];\n  }\n  let inferenceProviderMapping;\n  if (inferenceProviderMappingCache.has(params.model)) {\n    inferenceProviderMapping = inferenceProviderMappingCache.get(params.model);\n  } else {\n    inferenceProviderMapping = await (options?.fetch ?? fetch)(\n      `${HF_HUB_URL}/api/models/${params.model}?expand[]=inferenceProviderMapping`,\n      {\n        headers: args.accessToken?.startsWith(\"hf_\") ? { Authorization: `Bearer ${args.accessToken}` } : {}\n      }\n    ).then((resp) => resp.json()).then((json) => json.inferenceProviderMapping).catch(() => null);\n  }\n  if (!inferenceProviderMapping) {\n    throw new Error(`We have not been able to find inference provider information for model ${params.model}.`);\n  }\n  const providerMapping = inferenceProviderMapping[params.provider];\n  if (providerMapping) {\n    if (providerMapping.task !== task) {\n      throw new Error(\n        `Model ${params.model} is not supported for task ${task} and provider ${params.provider}. Supported task: ${providerMapping.task}.`\n      );\n    }\n    if (providerMapping.status === \"staging\") {\n      console.warn(\n        `Model ${params.model} is in staging mode for provider ${params.provider}. Meant for test purposes only.`\n      );\n    }\n    return providerMapping.providerId;\n  }\n  throw new Error(`Model ${params.model} is not supported provider ${params.provider}.`);\n}\n\n// src/lib/makeRequestOptions.ts\nvar HF_HUB_INFERENCE_PROXY_TEMPLATE = `${HF_ROUTER_URL}/{{PROVIDER}}`;\nvar tasks = null;\nvar providerConfigs = {\n  \"black-forest-labs\": BLACK_FOREST_LABS_CONFIG,\n  cohere: COHERE_CONFIG,\n  \"fal-ai\": FAL_AI_CONFIG,\n  \"fireworks-ai\": FIREWORKS_AI_CONFIG,\n  \"hf-inference\": HF_INFERENCE_CONFIG,\n  hyperbolic: HYPERBOLIC_CONFIG,\n  nebius: NEBIUS_CONFIG,\n  novita: NOVITA_CONFIG,\n  replicate: REPLICATE_CONFIG,\n  sambanova: SAMBANOVA_CONFIG,\n  together: TOGETHER_CONFIG\n};\nasync function makeRequestOptions(args, options) {\n  const { accessToken, endpointUrl, provider: maybeProvider, model: maybeModel, ...remainingArgs } = args;\n  const provider = maybeProvider ?? \"hf-inference\";\n  const providerConfig = providerConfigs[provider];\n  const { includeCredentials, task, chatCompletion: chatCompletion2, signal } = options ?? {};\n  if (endpointUrl && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use endpointUrl with a third-party provider.`);\n  }\n  if (maybeModel && isUrl(maybeModel)) {\n    throw new Error(`Model URLs are no longer supported. Use endpointUrl instead.`);\n  }\n  if (!maybeModel && !task) {\n    throw new Error(\"No model provided, and no task has been specified.\");\n  }\n  if (!providerConfig) {\n    throw new Error(`No provider config found for provider ${provider}`);\n  }\n  const hfModel = maybeModel ?? await loadDefaultModel(task);\n  const model = await getProviderModelId({ model: hfModel, provider }, args, {\n    task,\n    chatCompletion: chatCompletion2,\n    fetch: options?.fetch\n  });\n  const authMethod = accessToken ? accessToken.startsWith(\"hf_\") ? \"hf-token\" : \"provider-key\" : includeCredentials === \"include\" ? \"credentials-include\" : \"none\";\n  const url = endpointUrl ? chatCompletion2 ? endpointUrl + `/v1/chat/completions` : endpointUrl : providerConfig.makeUrl({\n    baseUrl: authMethod !== \"provider-key\" ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", provider) : providerConfig.baseUrl,\n    model,\n    chatCompletion: chatCompletion2,\n    task\n  });\n  const binary = \"data\" in args && !!args.data;\n  const headers = providerConfig.makeHeaders({\n    accessToken,\n    authMethod\n  });\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  const ownUserAgent = `${name}/${version}`;\n  const userAgent = [ownUserAgent, typeof navigator !== \"undefined\" ? navigator.userAgent : void 0].filter((x) => x !== void 0).join(\" \");\n  headers[\"User-Agent\"] = userAgent;\n  const body = binary ? args.data : JSON.stringify(\n    providerConfig.makeBody({\n      args: remainingArgs,\n      model,\n      task,\n      chatCompletion: chatCompletion2\n    })\n  );\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body,\n    ...credentials ? { credentials } : void 0,\n    signal\n  };\n  return { url, info };\n}\nasync function loadDefaultModel(task) {\n  if (!tasks) {\n    tasks = await loadTaskInfo();\n  }\n  const taskInfo = tasks[task];\n  if ((taskInfo?.models.length ?? 0) <= 0) {\n    throw new Error(`No default model defined for task ${task}, please define the model explicitly.`);\n  }\n  return taskInfo.models[0].id;\n}\nasync function loadTaskInfo() {\n  const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n  if (!res.ok) {\n    throw new Error(\"Failed to load tasks definitions from Hugging Face Hub.\");\n  }\n  return await res.json();\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503) {\n    return request(args, options);\n  }\n  if (!response.ok) {\n    const contentType = response.headers.get(\"Content-Type\");\n    if ([\"application/json\", \"application/problem+json\"].some((ct) => contentType?.startsWith(ct))) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(\n          `Server ${args.model} does not seem to support chat completion. Error: ${JSON.stringify(output.error)}`\n        );\n      }\n      if (output.error || output.detail) {\n        throw new Error(JSON.stringify(output.error ?? output.detail));\n      } else {\n        throw new Error(output);\n      }\n    }\n    const message = contentType?.startsWith(\"text/plain;\") ? await response.text() : void 0;\n    throw new Error(message ?? \"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503) {\n    return yield* streamingRequest(args, options);\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (typeof output.error === \"string\") {\n        throw new Error(output.error);\n      }\n      if (output.error && \"message\" in output.error && typeof output.error.message === \"string\") {\n        throw new Error(output.error.message);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            const errorStr = typeof data.error === \"string\" ? data.error : typeof data.error === \"object\" && data.error && \"message\" in data.error && typeof data.error.message === \"string\" ? data.error.message : JSON.stringify(data.error);\n            throw new Error(`Error forwarded from backend: ` + errorStr);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign(\n    {},\n    ...props.map((prop) => {\n      if (o[prop] !== void 0) {\n        return { [prop]: o[prop] };\n      }\n    })\n  );\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/tasks/audio/utils.ts\nfunction preparePayload(args) {\n  return \"data\" in args ? args : {\n    ...omit(args, \"inputs\"),\n    data: args.inputs\n  };\n}\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const payload = await buildPayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\nvar FAL_AI_SUPPORTED_BLOB_TYPES = [\"audio/mpeg\", \"audio/mp4\", \"audio/wav\", \"audio/x-wav\"];\nasync function buildPayload(args) {\n  if (args.provider === \"fal-ai\") {\n    const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : void 0;\n    const contentType = blob?.type;\n    if (!contentType) {\n      throw new Error(\n        `Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`\n      );\n    }\n    if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {\n      throw new Error(\n        `Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(\n          \", \"\n        )}`\n      );\n    }\n    const base64audio = base64FromBytes(new Uint8Array(await blob.arrayBuffer()));\n    return {\n      ...\"data\" in args ? omit(args, \"data\") : omit(args, \"inputs\"),\n      audio_url: `data:${contentType};base64,${base64audio}`\n    };\n  } else {\n    return preparePayload(args);\n  }\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const payload = args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    text: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-speech\"\n  });\n  if (res instanceof Blob) {\n    return res;\n  }\n  if (res && typeof res === \"object\") {\n    if (\"output\" in res) {\n      if (typeof res.output === \"string\") {\n        const urlResponse = await fetch(res.output);\n        const blob = await urlResponse.blob();\n        return blob;\n      } else if (Array.isArray(res.output)) {\n        const urlResponse = await fetch(res.output[0]);\n        const blob = await urlResponse.blob();\n        return blob;\n      }\n    }\n  }\n  throw new InferenceOutputError(\"Expected Blob or object with output\");\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"audio-to-audio\"\n  });\n  return validateOutput(res);\n}\nfunction validateOutput(output) {\n  if (!Array.isArray(output)) {\n    throw new InferenceOutputError(\"Expected Array\");\n  }\n  if (!output.every((elem) => {\n    return typeof elem === \"object\" && elem && \"label\" in elem && typeof elem.label === \"string\" && \"content-type\" in elem && typeof elem[\"content-type\"] === \"string\" && \"blob\" in elem && typeof elem.blob === \"string\";\n  })) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, audio: Blob}>\");\n  }\n  return output;\n}\n\n// src/tasks/cv/utils.ts\nfunction preparePayload2(args) {\n  return \"data\" in args ? args : { ...omit(args, \"inputs\"), data: args.inputs };\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const payload = preparePayload2(args);\n  const res = (await request(payload, {\n    ...options,\n    task: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/utils/delay.ts\nfunction delay(ms) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n}\n\n// src/tasks/cv/textToImage.ts\nfunction getResponseFormatArg(provider) {\n  switch (provider) {\n    case \"fal-ai\":\n      return { sync_mode: true };\n    case \"nebius\":\n      return { response_format: \"b64_json\" };\n    case \"replicate\":\n      return void 0;\n    case \"together\":\n      return { response_format: \"base64\" };\n    default:\n      return void 0;\n  }\n}\nasync function textToImage(args, options) {\n  const payload = !args.provider || args.provider === \"hf-inference\" || args.provider === \"sambanova\" ? args : {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    ...getResponseFormatArg(args.provider),\n    prompt: args.inputs\n  };\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-image\"\n  });\n  if (res && typeof res === \"object\") {\n    if (args.provider === \"black-forest-labs\" && \"polling_url\" in res && typeof res.polling_url === \"string\") {\n      return await pollBflResponse(res.polling_url, options?.outputType);\n    }\n    if (args.provider === \"fal-ai\" && \"images\" in res && Array.isArray(res.images) && res.images[0].url) {\n      if (options?.outputType === \"url\") {\n        return res.images[0].url;\n      } else {\n        const image = await fetch(res.images[0].url);\n        return await image.blob();\n      }\n    }\n    if (args.provider === \"hyperbolic\" && \"images\" in res && Array.isArray(res.images) && res.images[0] && typeof res.images[0].image === \"string\") {\n      if (options?.outputType === \"url\") {\n        return `data:image/jpeg;base64,${res.images[0].image}`;\n      }\n      const base64Response = await fetch(`data:image/jpeg;base64,${res.images[0].image}`);\n      return await base64Response.blob();\n    }\n    if (\"data\" in res && Array.isArray(res.data) && res.data[0].b64_json) {\n      const base64Data = res.data[0].b64_json;\n      if (options?.outputType === \"url\") {\n        return `data:image/jpeg;base64,${base64Data}`;\n      }\n      const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);\n      return await base64Response.blob();\n    }\n    if (\"output\" in res && Array.isArray(res.output)) {\n      if (options?.outputType === \"url\") {\n        return res.output[0];\n      }\n      const urlResponse = await fetch(res.output[0]);\n      const blob = await urlResponse.blob();\n      return blob;\n    }\n  }\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  if (options?.outputType === \"url\") {\n    const b64 = await res.arrayBuffer().then((buf) => Buffer.from(buf).toString(\"base64\"));\n    return `data:image/jpeg;base64,${b64}`;\n  }\n  return res;\n}\nasync function pollBflResponse(url, outputType) {\n  const urlObj = new URL(url);\n  for (let step = 0; step < 5; step++) {\n    await delay(1e3);\n    console.debug(`Polling Black Forest Labs API for the result... ${step + 1}/5`);\n    urlObj.searchParams.set(\"attempt\", step.toString(10));\n    const resp = await fetch(urlObj, { headers: { \"Content-Type\": \"application/json\" } });\n    if (!resp.ok) {\n      throw new InferenceOutputError(\"Failed to fetch result from black forest labs API\");\n    }\n    const payload = await resp.json();\n    if (typeof payload === \"object\" && payload && \"status\" in payload && typeof payload.status === \"string\" && payload.status === \"Ready\" && \"result\" in payload && typeof payload.result === \"object\" && payload.result && \"sample\" in payload.result && typeof payload.result.sample === \"string\") {\n      if (outputType === \"url\") {\n        return payload.result.sample;\n      }\n      const image = await fetch(payload.result.sample);\n      return await image.blob();\n    }\n  }\n  throw new InferenceOutputError(\"Failed to fetch result from black forest labs API\");\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\n      )\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    task: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function preparePayload3(args) {\n  if (args.inputs instanceof Blob) {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(new Uint8Array(await args.inputs.arrayBuffer()))\n      }\n    };\n  } else {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(\n          new Uint8Array(\n            args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n          )\n        )\n      }\n    };\n  }\n}\nasync function zeroShotImageClassification(args, options) {\n  const payload = await preparePayload3(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToVideo.ts\nvar SUPPORTED_PROVIDERS = [\"fal-ai\", \"replicate\"];\nasync function textToVideo(args, options) {\n  if (!args.provider || !typedInclude(SUPPORTED_PROVIDERS, args.provider)) {\n    throw new Error(\n      `textToVideo inference is only supported for the following providers: ${SUPPORTED_PROVIDERS.join(\", \")}`\n    );\n  }\n  const payload = args.provider === \"fal-ai\" || args.provider === \"replicate\" ? { ...omit(args, [\"inputs\", \"parameters\"]), ...args.parameters, prompt: args.inputs } : args;\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-video\"\n  });\n  if (args.provider === \"fal-ai\") {\n    const isValidOutput = typeof res === \"object\" && !!res && \"video\" in res && typeof res.video === \"object\" && !!res.video && \"url\" in res.video && typeof res.video.url === \"string\" && isUrl(res.video.url);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { video: { url: string } }\");\n    }\n    const urlResponse = await fetch(res.video.url);\n    return await urlResponse.blob();\n  } else {\n    const isValidOutput = typeof res === \"object\" && !!res && \"output\" in res && typeof res.output === \"string\" && isUrl(res.output);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { output: string }\");\n    }\n    const urlResponse = await fetch(res.output);\n    return await urlResponse.blob();\n  }\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"feature-extraction\"\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth)\n      return false;\n    if (arr.every((x) => Array.isArray(x))) {\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every((x) => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem.answer === \"string\" && typeof elem.end === \"number\" && typeof elem.score === \"number\" && typeof elem.start === \"number\"\n  ) : typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end: number, score: number, start: number}>\");\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const res = await request(prepareInput(args), {\n    ...options,\n    task: \"sentence-similarity\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\nfunction prepareInput(args) {\n  return {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    inputs: { ...omit(args.inputs, \"sourceSentence\") },\n    parameters: { source_sentence: args.inputs.sourceSentence, ...args.parameters }\n  };\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"table-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every((elem) => validate(elem)) : validate(res);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\nfunction validate(elem) {\n  return typeof elem === \"object\" && !!elem && \"aggregator\" in elem && typeof elem.aggregator === \"string\" && \"answer\" in elem && typeof elem.answer === \"string\" && \"cells\" in elem && Array.isArray(elem.cells) && elem.cells.every((x) => typeof x === \"string\") && \"coordinates\" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every(\n    (coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\")\n  );\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    task: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  if (args.provider === \"together\") {\n    args.prompt = args.inputs;\n    const raw = await request(args, {\n      ...options,\n      task: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.text\n    };\n  } else if (args.provider === \"hyperbolic\") {\n    const payload = {\n      messages: [{ content: args.inputs, role: \"user\" }],\n      ...args.parameters ? {\n        max_tokens: args.parameters.max_new_tokens,\n        ...omit(args.parameters, \"max_new_tokens\")\n      } : void 0,\n      ...omit(args, [\"inputs\", \"parameters\"])\n    };\n    const raw = await request(payload, {\n      ...options,\n      task: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.message.content\n    };\n  } else {\n    const res = toArray(\n      await request(args, {\n        ...options,\n        task: \"text-generation\"\n      })\n    );\n    const isValidOutput = Array.isArray(res) && res.every((x) => \"generated_text\" in x && typeof x?.generated_text === \"string\");\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n    }\n    return res?.[0];\n  }\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    task: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      task: \"token-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      task: \"zero-shot-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && /// Together.ai and Nebius do not output a system_fingerprint\n  (res.system_fingerprint === void 0 || res.system_fingerprint === null || typeof res.system_fingerprint === \"string\") && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    task: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, {\n      ...options,\n      task: \"document-question-answering\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && (typeof elem.end === \"number\" || typeof elem.end === \"undefined\") && (typeof elem.score === \"number\" || typeof elem.score === \"undefined\") && (typeof elem.start === \"number\" || typeof elem.start === \"undefined\")\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    task: \"visual-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && typeof elem.score === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\n\n// src/types.ts\nvar INFERENCE_PROVIDERS = [\n  \"black-forest-labs\",\n  \"cohere\",\n  \"fal-ai\",\n  \"fireworks-ai\",\n  \"hf-inference\",\n  \"hyperbolic\",\n  \"nebius\",\n  \"novita\",\n  \"replicate\",\n  \"sambanova\",\n  \"together\"\n];\nexport {\n  HfInference,\n  HfInferenceEndpoint,\n  INFERENCE_PROVIDERS,\n  InferenceOutputError,\n  audioClassification,\n  audioToAudio,\n  automaticSpeechRecognition,\n  chatCompletion,\n  chatCompletionStream,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToImage,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  tabularClassification,\n  tabularRegression,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  textToVideo,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification,\n  zeroShotImageClassification\n};\n"],
  "mappings": "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",
  "names": []
}
